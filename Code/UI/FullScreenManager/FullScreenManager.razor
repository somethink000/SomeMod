@namespace GeneralGame.UI
@attribute [StyleSheet]
@inherits Panel

@if (PlayerBase.GetLocal() is null)
    return;

<root>
	    <Chat/>


		@switch ( ActivePanel )
		{
			case FullScreenPanel.InGameHud:
				<InGameHud/>
				break;
			case FullScreenPanel.Inventory:
				<Inventory/>
				break;
            case FullScreenPanel.SpawnMenu:
                <SpawnMenu/>
                break;
            case FullScreenPanel.Chat:
				break;
			default:
				throw new ArgumentOutOfRangeException();
		}
	
		
</root>

@code {
    public static FullScreenManager Instance { get; private set; }

    public enum FullScreenPanel
    {
        InGameHud,
        Inventory,
        PauseMenu,
        SpawnMenu,
        Chat,
    }

    public FullScreenPanel ActivePanel { get; private set; } = FullScreenPanel.InGameHud;
    


    public FullScreenManager()
    {
        Instance = this;
    }

    public void Display( FullScreenPanel panel )
    {
        ActivePanel = panel;
    }

    public override void Tick()
    {
        if (Input.EscapePressed)
        {
            Toggle(FullScreenPanel.InGameHud);

        }
     
        if (Input.Pressed(InputButtonHelper.Chat) || Input.Pressed(InputButtonHelper.ChatLocal))
        {
            Toggle(FullScreenPanel.Chat);
            Chat.Instance.Toggle();

        }
		if (Input.Pressed(InputButtonHelper.Inventory))
		{
			Toggle( FullScreenPanel.Inventory );
            
        }
        if (Input.Down(InputButtonHelper.SpawnMenu) && ActivePanel != FullScreenPanel.SpawnMenu)
        {
             
            Toggle(FullScreenPanel.SpawnMenu);

        }
        else if (!Input.Down(InputButtonHelper.SpawnMenu) && ActivePanel == FullScreenPanel.SpawnMenu)
        {
            Toggle(FullScreenPanel.SpawnMenu);
        }
        
    }

	private void Toggle( FullScreenPanel panel )
	{
		if ( ActivePanel == panel )
			ActivePanel = FullScreenPanel.InGameHud;
		else
			ActivePanel = panel;
	}

	public static bool Is( FullScreenPanel mode )
		=> FullScreenManager.Instance?.ActivePanel == mode;

	protected override int BuildHash()
	{
		return HashCode.Combine( ActivePanel.GetHashCode() );
	}
}
